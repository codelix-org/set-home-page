name: Automated ruby tests run
run-name: Automated ruby tests
on: pull_request
jobs:
  ruby-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ""
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      steps:
        - uses: actions/checkout@v3

        - name: Set up Ruby
          uses: ruby/setup-ruby@359bebbc29cbe6c87da6bc9ea3bc930432750108

        - uses: actions/setup-node@v1
          with:
            node-version: '10.x'
            registry-url: 'https://registry.npmjs.org'

        - name: Gem cache
          id: cache-bundle
          uses: actions/cache@v1
          with:
            path: vendor/bundle
            key: bundle-${{ hashFiles('**/Gemfile.lock') }}

        - name: Bundle install
          env:
            RAILS_ENV: test
          run: |
            gem install bundler
            bundle install --jobs 4 --retry 3 --path vendor/bundle

        - name: Install yarn
          run: npm install -g yarn

        # NOTE: Yarn cache doesn't seem to be working quite yet
        - name: Get yarn cache dir
          id: yarn-cache-dir
          run: echo "::set-output name=dir::$(yarn cache dir)"

        - name: Yarn cache
          id: cache-yarn
          uses: actions/cache@v1
          with:
            path: ${{ steps.yarn-cache-dir.outputs.dir }}
            key: yarn-${{ hashFiles('**/yarn.lock') }}

        - name: Yarn install
          run: yarn install

        - name: Setup DB, Run tests
          env:
            PGHOST: postgres
            PGUSER: postgres
            PGPORT: ${{ job.services.postgres.ports[5432] }}
            RAILS_ENV: test
          run: |
            bin/rails db:create db:schema:load
            bundle exec rspec

        - name: Send http request for automated tests
          uses: fjogeleit/http-request-action@v1
          with:
            url: 'https://www.codelix.co.uk/api/notify_automated_tests_successful'
            method: 'POST'
            customHeaders: '{"Content-Type": "application/json"}'
            data: '{"repo_url": "${{ github.repositoryUrl }}", "pr_number": "${{ github.event.number }}", "opened_by_github_username": "${{ github.actor }}"}'
